spi机制

SPI(Service Provider Interface)是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件,主要用于框架中开发，例如Dubbo、Spring、Common-Logging，JDBC等采用采用SPI机制，针对同一接口采用不同的实现提供给不同的用户，从而提高了框架的扩展性。

1）Java SPI实现
Java内置的SPI通过java.util.ServiceLoader类解析classPath和jar包的META-INF/services/目录 下的以接口全限定名命名的文件，并加载该文件中指定的接口实现类，以此完成调用。

说明：Java实现spi是通过ServiceLoader来查找服务提供的工具类。

上述只是通过简单的示例来实现下java的内置的SPI功能。其实现原理是ServiceLoader是Java内置的用于查找服务提供接口的工具类，通过调用load()方法实现对服务提供接口的查找，最后遍历来逐个访问服务提供接口的实现类。

从源码可以发现：

ServiceLoader类本身实现了Iterable接口并实现了其中的iterator方法，iterator方法的实现中调用了LazyIterator这个内部类中的方法，解析完服务提供接口文件后最终结果放在了Iterator中返回，并不支持服务提供接口实现类的直接访问。

所有服务提供接口的对应文件都是放置在META-INF/services/目录下，final类型决定了PREFIX目录不可变更。

虽然java提供的SPI机制的思想非常好，但是也存在相应的弊端。具体如下：

Java内置的方法方式只能通过遍历来获取
服务提供接口必须放到META-INF/services/目录下。
针对java的spi存在的问题，Spring的SPI机制沿用的SPI的思想，但对其进行扩展和优化。

2）Spring SPI
Spring SPI沿用了Java SPI的设计思想，Spring采用的是spring.factories方式实现SPI机制，可以在不修改Spring源码的前提下，提供Spring框架的扩展性。

从示例中我们看出，Spring 采用spring.factories实现SPI与java实现SPI非常相似，但是spring的spi方式针对java的spi进行的相关优化具体内容如下：

Java SPI是一个服务提供接口对应一个配置文件，配置文件中存放当前接口的所有实现类，多个服务提供接口对应多个配置文件，所有配置都在services目录下；

Spring factories SPI是一个spring.factories配置文件存放多个接口及对应的实现类，以接口全限定名作为key，实现类作为value来配置，多个实现类用逗号隔开，仅spring.factories一个配置文件。
那么spring是如何通过加载spring.factories来实现SpI的呢?我们可以通过源码来进一步分析。

说明:loadFactoryNames解析spring.factories文件中指定接口的实现类的全限定名

说明： 获取所有jar包中META-INF/spring.factories文件路径，以枚举值返回。 遍历spring.factories文件路径，逐个加载解析，整合factoryClass类型的实现类名称，获取到实现类的全类名称后进行类的实例话操作。

说明：实例化是通过反射来实现对应的初始化。


