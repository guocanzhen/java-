api接口安全问题：


1）项目需要为第三方提供api服务接口。接口涉及到核心功能，如何保证接口安全。防止伪造身份、篡改数据？

思路：
保障数据安全最好的方法，当然是加密了。无法解析内容，自然无法伪造，篡改。
可是使用https证书需要收费的。有其它方法么？
有的。
消息哈希认证(hmac)。
算法描述：
访问者：
1. 当访问接口时, 将参数按key值排序，组成key1=value1&key2=value2&....&secret_key=...
2. 然后对上面结果做md5，生成签名sign
3. 将sign放到加入请求的参数
被访问者：
密钥是被访问者提供了，它也有访问者的secret_key.
1.根据app_id查到secret_key
2.处理请求参数，按规则组成key1=value1&key2=value2....&secret_key=...
3.对上一步结果做md5,生成sign。比较两个sign，相等则身份验证通过

2）如何防止API接口被恶意调用

1、客户端防护
1.客户端双向认证。在app中预置证书（跨平台也是一致的方案），要求更高的话使用专用的证书设备，线下签发，例如银行的U盾。
2.客户端双反hook，反调试，防逆向。
3.客户端运行环境校验，通过读取硬件信息识别pc还是移动设备以及设备MAC相关信息。

2、传输层防护
1.传输协议防护，首先接口建议使用 HTTPS 协议，这样至少会给破解者在抓包的时候提高一些难度。

3、服务端防护
1.验证签名与授权信息是否合法，是否失效。
2.参数合法性校验，例如时间戳和参数签名校验。过滤一些非法参数。
3.数据加密，签名可以采用非对称加密，参数采用对称加密，密匙采用非对称的私匙。
4.定时更新签名以及加密信息。
5.接口监控，接口的使用设备，使用频率，调用顺序是否合法。
6.风控策略防护，有一点作用但是对于有明确指向性的攻击意义不大，IP可以换，频率可以变，很容易就绕过了，策略的设计上要注意尽量少用短命的规则，而且一般只对低级别的对抗有效。
7.通过风控平台进行用户行为分析，数据挖掘，然后通过机器学习形成风控模型，对风险进行全方位识别，预警以及管控。

4、安全鉴权案例

4.1 微盟开放平台
微盟也是根据OAuth2.0授权流程实现。
参数			说明
client_id		开发者应用用于发起微盟Oauth_2.0授权的凭证（可在“开发者中心”创建应用后获取到）
client_secret	开发者应用用于发起微盟Oauth_2.0授权的凭证（可在“开发者中心”创建应用后获取到）
redirect_uri	应用发起请求时，所传的回调地址参数，用于接收平台返回的数据
access_token	开发者完成授权后，被颁发调用微盟API 的凭证
refresh_token	刷新access_token的凭证，当access_token过期时，开发者可以用refresh_token刷新得到新的access_token
微盟鉴权文档地址：https://cloud.weimob.com/saas/word/detail.html?tag=564&menuId=2

4.2 微信开放平台
微信开放平台授权需要7步才能完成，并且在此之前还需要通过开放平台开发配置，数据通过AES加密验证。
1、配置授权事件URL，用于接收[component_verify_ticket]。
2、获得component_verify_ticket后，按照[获取第三方平台 component_access_token]接口文档，调用接口获取component_access_token。
3、获得component_access_token后，按照[获取预授权码 pre_auth_code]接口文档 ，调接口获取pre_auth_code。
4、获得pre_auth_code后，按照[授权技术流程说明]文档 ，引导用户授权后获取authorization_code
5、获得authorization_code后，按照[使用授权码换取公众号或小程序的接口调用凭据和授权信息]接口文档 ，调接口获取authorizer_refresh_token。
6、获得authorizer_refresh_token后，按照[获取/刷新授权公众号或小程序的接口调用凭据]接口文档 ，调接口获取authorizer_access_token。
7、按照接口文档，代替公众号或小程序调用接口。
微信开放平台授权文档地址：https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/Before_Develop/creat_token.html


2）如何防止别人恶意攻击调用API接口
1、验证码（最简单有效的防护），采用点触验证，滑动验证或第三方验证码服务，普通验证码很容易被破解
2、频率，限制同设备，同IP等发送次数，单点时间范围可请求时长
3、归属地，检测IP所在地是否与手机号归属地匹配；IP所在地是否是为常在地
4、可疑用户，对于可疑用户要求其主动发短信（或其他主动行为）来验证身份
5、黑名单，对于黑名单用户，限制其操作，API接口直接返回success，1可以避免浪费资源，2混淆黑户判断
6、签名，API接口启用签名策略，签名可以保障请求URL的完整安全，签名匹配再继续下一步操作
7、token，对于重要的API接口，生成token值，做验证
8、https，启用https，https 需要秘钥交换，可以在一定程度上鉴别是否伪造IP
9、代码混淆，发布前端代码混淆过的包
10、风控，大量肉鸡来袭时只能受着，同样攻击者也会暴露意图，分析意图提取算法，分析判断是否为恶意 如果是则断掉；异常账号及时锁定；或从产品角度做出调整，及时止损。
11、数据安全，数据安全方面做策略，攻击者得不到有效数据，提高攻击者成本
12、恶意IP库，https://threatbook.cn/，过滤恶意IP

tips：
鉴别IP真伪（自己识别代理IP和机房IP成本略高，可以考虑第三方saas服务。由肉鸡发起的请求没辙，只能想其他方法）
手机号真伪（做空号检测，同样丢给供应商来处理，达不到100%准确率，效率感人，并且不是实时的，可以考虑选择有防攻击的运营商）
安全问题是长期的和攻击者斗智斗勇的问题，没有一劳永逸的解决方案，不断交锋，不断成长。








