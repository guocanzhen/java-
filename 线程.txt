线程：

线程与进程的关系
1、线程：每个进程中至少包含一个线程，而这些线程都在共享进程的资源空间等，当线程发生变化的时候只会引起CPU执行的过程发生变化，不会改变进程所拥有的资源。同理一个程序中至少包含一个进程。进程中执行运算的最小单位，亦是执行处理机调度的基本单位
2、进程：每个进程都有自己的地址空间，资源如，内存，I/O,CPU，同一个进程里的线程共享本进程里的地址空间，那能不能使用别人家进程的地址空间呢，显然这是不可以的。由于进程的独立性，当某一个进程崩溃之后，在保护模式下不会对别的进程进行影响。资源分配的基本单位，运行调度的基本单位，系统中并发执行的单位。
3、使用区别：当我们对资源的保护管理要求比较高的时候，建议使用多进程，当然存在的开销也会比较大，反过来，如果频繁切换下，对资源的保护管理要求不那么高，或者开销有限，使用多线程会比较方便。
4、两者的比较：
（1）调度
同一个进程中，线程的切换不会引起进程的切换；
由一个进程的线程切换到另一个进程的线程时，引起进程的切换。
（2）并发性
进程可以并发执行，而一个进程中的线程也可以并发执行
（3）拥有的资源
一般来说，线程并不会拥有自己的资源，但是它可以访问自己本进程中的资源，比如，一个进程打开的文件等，进程的其他线程是可以共享的。
（4）系统开销

多线程
创建：
1、继承Thread类：重写run方法，运行：Thread.start
2、实现Runnable接口：重写run方法，运行：Thread.start
3、实现Callable接口：重写call方法，运行：Thread.start
Callable和Runnable的区别：
callable的核心是call方法，允许返回值，runnable的核心是run方法，没有返回值
call方法可以抛出异常，但是run方法不行
因为runnable是java1.1就有了，所以他不存在返回值，后期在java1.5进行了优化，就出现了callable，就有了返回值和抛异常
callable和runnable都可以应用于executors。而thread类只支持runnable