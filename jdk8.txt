jdk8新写法：

1、函数式接口

什么是函数式 ( 接口）：
只包含一个抽象方法的接口，称为 函数式接口
你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常 即：非运行时异常 ))，那么该异常需要在目标接口的抽象方法上进行声明）
我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口
在 java.util.function 包下定义 了 Java 8 的丰富的函数式 接口

如何理解函数式接口：
Java 从诞生日起就是一直倡导“一切皆对象”， 在 Java 里面面向对象 (
编程是一切。但是随着 python 、 scala 等语言的兴起和新技术的挑战 Java 不
得不做出调整以便支持更加广泛的技术要求，也即 java 不但可以支持 OOP 还
可以支持 OOF （面向函数编程）
在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的
编程语言中， Lambda 表达式的类型是函数。但是在 Java8 中，有所不同。在
Java8 中， Lambda 表达式是对象，而不是函数，它们必须依附于一类特别的
对象类型–函数式接口
简单的说，在 Java8 中， Lambda 表达式就是一个函数式接口的实例。 这就是
Lambda 表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口
的实例，那么该对象就可以用 Lambda 表达式来表示
所以以前用 匿名实现类 表示的现在都可以用 Lambda 表达式来写

函数式接口举例：
@FunctionalInterface
public interface Runnable {
    /**
     * When an object implementing interface <code>Runnable</code> is used
     * to create a thread, starting the thread causes the object's
     * <code>run</code> method to be called in that separately executing
     * thread.
     * <p>
     * The general contract of the method <code>run</code> is that it may
     * take any action whatsoever.
     *
     * @see     java.lang.Thread#run()
     */
    public abstract void run();
}

Java内置的函数式接口介绍及使用举例：
函数式接口	参数类型	返回类型	用途
Consumer 消费型接口	T	void	对类型为T的对象应用操作，包含方法：void accept(T t)
Supplier 供给型接口	无	T	返回类型为T的对象，包含方法：T get()
Function<T, R>函数型接口	T	R	对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)
Predicate断定型接口	T	boolean	确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法：boolean test(T t)
BiFunction<T,U,R>	T, U	R	对类型为T,U参数应用操作，返回R类型的结果。包含方法为：Rapply(T t,U u)
UnaryOperator(Function子接口)	T	T	对类型为T的对象进行一元运算，并返回T类型的结果。包含方法为：Tapply(T t);
BinaryOperator(BiFunction子接口)	T,T	T	对类型为T的对象进行二元运算，并返回T类型的结果。包含方法为：Tapply(T t1,T t2);
BiConsumer<T,U>	T,U	void	对类型为T,U参数应用操作。包含方法为：voidaccept(Tt,Uu)
BiPredicate<T,U>	T,U	boolean	包含方法为：booleantest(Tt,Uu)
ToIntFunction	T	int	计算int值的函数
ToLongFunction	T	long	计算long值的函数
ToDoubleFunction	T	double	计算double值的函数
IntFunction	int	R	参数为int类型的函数
LongFunction	long	R	参数为long类型的函数
DoubleFunction	double	R	参数为double类型的函数

2、lambda表达式
匿名函数，Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）
格式：
-> :lambda操作符 或 箭头操作符
->左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）
->右边：lambda体 （其实就是重写的抽象方法的方法体）

3、方法引用、构造器引用

方法引用的使用：
当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！
方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式
也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。
要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！
格式：使用操作符“::” 将类(或对象) 与方法名分隔开来。
如下三种主要使用情况：
对象::实例方法名
类::静态方法名
类::实例方法名

构造器引用与数组引用的使用：
格式：ClassName::new //构造器引用
格式：type[] :: new  //数组引用
与函数式接口相结合，自动与函数式接口中方法兼容。
可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。

4、stream api
Stream API说明：
Stream API ( java.util.stream)把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。
Stream 是Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询。也可以使用Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。

为什么要使用Stream API：
实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据就需要Java层面去处理。
Stream 和Collection 集合的区别：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算。

什么是Stream：
是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 “集合讲的是数据 Stream 讲的是计算！”
Stream 自己不会存储元素。
Stream 不会改变源对象。相反，他们会返回一个持有结果的新 Stream 。
Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。

Stream 的操作三个步骤：
创建 Stream：一个数据源（如：集合、数组），获取一个
中间操作：一个中间操作链，对数据源的数据进行处理
终止操作 终端操作：一旦执行 终止操作， 就 执行中间操作链 ，并产生结果 。之后，不会再被使用

Stream的创建：

创建Stream 方式一：通过集合
Java8中的 Collection 接口被扩展，提供了两个获取流的方法
default Stream<E> stream() : 返回一个顺序流
default Stream<E> parallelStream() : 返回一个并行流

创建Stream 方式二：通过数组
Java8中的 Arrays 的静态方法 stream() 可以获取数组流：
static <T> Stream<T> stream(T[] array): 返回一个流
重载形式，能够处理对应基本类型的数组：
public static IntStream stream(int[] array)
public static LongStream stream(long[] array)
public static DoubleStream stream(double[] array)

创建Stream 方式三：通过Stream的of()
可以调用Stream 类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。
public static<T> Stream<T> of(T... values) : 返回一个流

创建Stream 方式四：创建无限流
可以使用静态方法Stream.iterate() 和 Stream.generate()，创建无限流。
public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)//迭代
public static<T> Stream<T> generate(Supplier<T> s)//生成

Stream的中间操作：
多个中间操作 可以连接起来形成一个 流水线 ，除非流水线上触发终止操作，否则 中间操作不会执行任何的处理 ！而在 终止操作时一次性全部处理，称为“惰性求值” 。

1-筛选与切片
方法	描述
filter(Predicate p)	接收Lambda ，从流中排除某些元素
distinct()	筛选，通过流所生成元素的hashCode() 和equals() 去除重复元素
limit(long maxSize)	截断流，使其元素不超过给定数量
skip(long n)	跳过元素，返回一个扔掉了前n 个元素的流。若流中元素不足n 个，则返回一个空流。与limit(n)互补

2-映射
方法	描述
map(Function f)	接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。
mapToDouble(ToDoubleFunction f)	接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream。
mapToInt(ToIntFunction f)	接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream。
mapToLong(ToLongFunction f)	接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream。
flatMap(Function f)	接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流

3-排序
方法	描述
sorted()	产生一个新流，其中按自然顺序排序
sorted(Comparator com)	产生一个新流，其中按比较器顺序排序

Stream的终止操作：匹配与查找
终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是void 。
流进行了终止操作后，不能再次使用。

1-匹配与查找
方法	描述
allMatch(Predicate p)	检查是否匹配所有元素
anyMatch(Predicate p)	检查是否至少匹配一个元素
noneMatch(Predicate p)	检查是否没有匹配所有元素
findFirst()	返回第一个元素
findAny()	返回当前流中的任意元素
count()	返回流中元素总数
max(Comparator c)	返回流中最大值
min(Comparator c)	返回流中最小值
forEach(Consumer c)	内部迭代(使用Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代——它帮你把迭代做了)

2-归约
方法	描述
reduce(T iden, BinaryOperator b)	可以将流中元素反复结合起来，得到一个值。返回T
reduce(BinaryOperator b)	可以将流中元素反复结合起来，得到一个值。返回Optional
备注：map 和reduce 的连接通常称为map-reduce 模式。

3-收集
方法	描述
collect(Collector c)	将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法
Collector接口中方法的实现决定了如何对流执行收集的操作 如收集到 List 、 Set 、Map。
另外，Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例

a、并行流
b、串行流

5、接口的增强
a、静态方法
b、默认方法

6、optional类

Optional类的介绍：
到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。
Optional 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用null 表示一个值不存在，现在Optional 可以更好的表达这个概念。并且可以避免空指针异常。
Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。
Optional提供很多有用的方法，这样我们就不用显式进行空值检测

创建Optional类对象的方法：
Optional.of(T t): 创建一个Optional 实例，t必须非空；
Optional.empty() : 创建一个空的Optional 实例
Optional.ofNullable(T t)：t可以为null

判断Optional容器中是否包含对象：
boolean isPresent() : 判断是否包含对象
void ifPresent(Consumer<? super T> consumer) ：如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。

获取Optional容器的对象：
T get(): 如果调用对象包含值，返回该值，否则抛异常
T orElse(T other) ：如果有值则将其返回，否则返回指定的other对象。
T orElseGet(Supplier<? extends T> other) ：如果有值则将其返回，否则返回由Supplier接口实现提供的对象。
T orElseThrow(Supplier<? extends X> exceptionSupplier) ：如果有值则将其返回，否则抛出由Supplier接口实现提供的异常。



7、新的时间和日期api

8、其他新特性
a、重复注解
b、类型注解
c、通用目标类型推断
d、jdk更新
集合的流式操作
并发
arrays
number和math
io/nio的改进
reflection获取形参名
String:join()
files
e、新编译工具
f、jvm中的metaspace取代permgen空间