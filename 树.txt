树：

1）原理：

树的词汇：
1、节点
节点是树的基本部分，可以有附加信息。
2、边
连接两个节点显示它们之间存在的关系
3、根
树的根是树中唯一没有传入边的节点
4、路径
路径是边连接节点额有序列表
5、子节点
具有来自相同传入边的节点c的集合称为该节点的子节点
6、父节点
具有和它相同传入边的所连接的节点称为父节点
7、兄弟
树中同一父节点的节点被称为兄弟节点
8、子树
子树是由父节点和该父节点的所有后代组成的一组节点和边
9、叶节点
叶节点是没有子节点的节点
10.层数
节点n的层数为从根节点到该节点所经过的分支数目
11、高度
树的高度等于树中任何节点的最大层数

2）树的遍历：
三种遍历方式（深度优先搜索）：先序、中序、后序
先序：先访问根节点，再访问左子树，最后访问右子树。
中序：先左子树，再根节点，最后右子树。
后序：先左子树，再右子树，最后根节点。

层序遍历（广度优先搜索）：每一层从左到右访问每一个节点。

3）二叉树的详解与实现

二叉树分类
1、完全二叉树
若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。
一维数组可以作为完全二叉树的存储结构，堆排序使用的数据结构就是完全二叉树。

2、满二叉树
国际标准定义是除了叶结点外每一个结点都有左右子结点的二叉树
国内的定义是：除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。很显然，按照这个定义，上面的图示二叉树就不是满二叉树。

3、扩充二叉树
扩充二叉树是对已有二叉树的扩充，扩充后的二叉树的节点都变为度数为2的分支节点。也就是说，如果原节点的度数为2，则不变，度数为1，则增加一个分支，度数为0的叶子节点则增加两个分支。

4、平衡二叉树
是一棵空树或它的任意节点的左右两个子树的高度差的绝对值不超过1

4）二叉树的应用场景

普通的二叉树，很难构成现实的应用场景，但因其简单，常用于学习研究，平衡二叉树则是实际应用比较多的。常见于快速匹配、搜索等方面。

常用的树有：AVL树、红黑树、B+树、Trie（字典）树。
1、AVL树: 最早的平衡二叉树之一。应用相对其他数据结构比较少。windows对进程地址空间的管理用到了AVL树。如果一棵二叉搜索树的高度是平衡的，它就是AVL树。（注意： 这里所说的二叉搜索树的高度是平衡的是指，树中每个结点左右子树高度之差的绝对值不超过1，因为只有满二叉树才能做到每个结点左右子树高度之差均为0。）
2、红黑树: 平衡二叉树，广泛用在C++的STL中。如map和set都是用红黑树实现的。还有Linux文件管理。
3、B/B+树: 用在磁盘文件组织、数据索引和数据库索引。
4、Trie树(字典树): 用在统计和排序大量字符串，如自动机、M数据库索引。

5）二叉排序树（BST树）
二叉排序树，又称二叉查找树、二叉搜索树。
可以是一颗空树，性质如下：
若左子树不空，则左子树上所有结点的值均小于它的根结点的值；
若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；
左、右子树也分别为二叉排序树。

6）AVL树（平衡二叉树）
AVL树或者是空二叉树，或者是具有如下性质的BST：
1、根结点的左、右子树高度之差的绝对值不超过1
2、且根结点左子树和右子树仍然是AVL树。

7）红黑树
1、红黑树本质上是一种二叉查找树，但它在二叉查找树的基础上额外添加了一个标记（颜色），同时具有一定的规则。这些规则使红黑树保证了一种平衡，插入、删除、查找的最坏时间复杂度都为 O(logn)。
从根节点到叶节点的路径上黑色节点的个数，叫做树的黑色高度。
每个节点要么是红色，要么是黑色；/4、根节点永远是黑色的；
所有的叶节点都是是黑色的（注意这里说叶子节点其实是上图中的 NIL 节点）；
每个红色节点的两个子节点一定都是黑色；
从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点；
2、各种操作的时间复杂度，能保证在最坏情况下，基本的动态几何操作的时间均为O（lgn）
3、相对于BST和AVL树，红黑树是牺牲了严格的高度平衡的优越条件为代价，能够以O(log2n)的时间复杂度进行搜索、插入、删除操作。最坏情况下，查找（O(lgn)）比二叉排序树快O(n)。较于AVL树，红黑树在数据较乱时查找要更快。
4、与哈希表对比，哈希的内存需求更大，map查找log(n)级别。当数据是静态的时候使用哈希，数据需要动态维护则使用红黑树比较好。比如Linux内核系统使用红黑树维护内存块。

红黑树的旋转
左旋：把右子树里的一个节点移动到了左子树。
右旋：把左子树里的一个节点移动到了右子树。

8）B树和B+树

B树：
B树即平衡查找树，一般理解为平衡多路查找树，也称为B-树、B_树。是一种自平衡树状数据结构，能对存储的数据进行O(logn)的时间复杂度进行查找、插入和删除。B树一般较多用在存储系统上，比如数据库或文件系统。
B树特点：
B树可以定义一个m值作为预定范围，即m路(阶)B树。
每个节点最多有m个孩子。
每个节点至少有ceil(m/2)个孩子，除了根节点和叶子节点外。
对于根节点，子树个数范围为[2,m]，节点内值的个数范围为[1,m-1]。
对于非根节点，节点内的值个数范围为[ceil(m/2)-1,m-1]。
根节点(非叶子节点)至少有两个孩子。
一个有k个孩子的非叶子节点包含k-1个值。
所有叶子节点在同一层。
节点内的值按照从小到大排列。
父节点的若干值作为分离值分成多个子树，左子树小于对应分离值，对应分离值小于右子树。

B+树：
工作开发中最常接触到的 InnoDB 存储引擎中的 B+ 树索引。要介绍 B+ 树索引，就不得不提二叉查找树，平衡二叉树和 B 树这三种数据结构。B+ 树就是从他们仨演化来的。
B+ 树是对 B 树的进一步优化。
B+ 树和 B 树有什么不同：
1、B+ 树非叶子节点上是不存储数据的，仅存储键值，而 B 树节点中不仅存储键值，也会存储数据。
之所以这么做是因为在数据库中页的大小是固定的，InnoDB 中页的默认大小是 16KB。
如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的 IO 次数又会再次减少，数据查询的效率也会更快。
另外，B+ 树的阶数是等于键值的数量的，如果我们的 B+ 树一个节点可以存储 1000 个键值，那么 3 层 B+ 树可以存储 1000×1000×1000=10 亿个数据。
一般根节点是常驻内存的，所以一般我们查找 10 亿数据，只需要 2 次磁盘 IO。
2、因为 B+ 树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。
那么 B+ 树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。而 B 树因为数据分散在各个节点，要实现这一点是很不容易的。
有心的读者可能还发现上图 B+ 树中各个页之间是通过双向链表连接的，叶子节点中的数据是通过单向链表连接的。
其实上面的 B 树我们也可以对各个节点加上链表。这些不是它们之前的区别，是因为在 MySQL 的 InnoDB 存储引擎中，索引就是这样存储的。
也就是说上图中的 B+ 树索引就是 InnoDB 中 B+ 树索引真正的实现方式，准确的说应该是聚集索引（聚集索引和非聚集索引下面会讲到）。
通过上图可以看到，在 InnoDB 中，我们通过数据页之间通过双向链表连接以及叶子节点中数据之间通过单向链表连接的方式可以找到表中所有的数据。
MyISAM 中的 B+ 树索引实现与 InnoDB 中的略有不同。在 MyISAM 中，B+ 树索引的叶子节点并不存储数据，而是存储数据的文件地址。

9）字典树


10）线段树
线段树的提出是为了以log(n)复杂度快速的求出数组中所有树的和所提出的。
1.线段树的每个节点代表着一个区间
2.线段树具有唯一的根节点，统计的范围为：[1,N]
3.对于每个内部节点[l,r]。左子节点是[l,mid]，右边子节点是[mid+1,r]，mid = (l+r)/2（向下取整）

11）树类搜索算法
一般来说就是深度优先搜索,广度优先搜索,A搜索,IDA搜索等几种，通常用的最多就是DFS和BFS。

1、DFS简述
适用于树型查找。
找到当前可以拓展的点，就走此分支。
如果当前分支无效或者找到了目标，就退回到上一步，称之为回溯。
每个节点最多访问两次，一次入栈，一次出栈。

2、BFS简述
使用于图型结构的搜索，通过队列层层向外拓展。
找到可以拓展的点，将其放入队列中。
每次选取队列的对头，作为当前状态。


12）聚集索引 VS 非聚集索引
在上节介绍 B+ 树索引的时候，我们提到了图中的索引其实是聚集索引的实现方式。
那什么是聚集索引呢？在 MySQL 中，B+ 树索引按照存储方式的不同分为聚集索引和非聚集索引。
这里我们着重介绍 InnoDB 中的聚集索引和非聚集索引：
1、聚集索引（聚簇索引）：以 InnoDB 作为存储引擎的表，表中的数据都会有一个主键，即使你不创建主键，系统也会帮你创建一个隐式的主键。
这是因为 InnoDB 是把数据存放在 B+ 树中的，而 B+ 树的键值就是主键，在 B+ 树的叶子节点中，存储了表中所有的数据。
这种以主键作为 B+ 树索引的键值而构建的 B+ 树索引，我们称之为聚集索引。
2、非聚集索引（非聚簇索引）：以主键以外的列值作为键值构建的 B+ 树索引，我们称之为非聚集索引。
非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为回表。
明白了聚集索引和非聚集索引的定义，我们应该明白这样一句话：数据即索引，索引即数据。

13）利用聚集索引和非聚集索引查找数据
前面我们讲解 B+ 树索引的时候并没有去说怎么在 B+ 树中进行数据的查找，主要就是因为还没有引出聚集索引和非聚集索引的概念。
下面我们通过讲解如何通过聚集索引以及非聚集索引查找数据表中数据的方式介绍一下 B+ 树索引查找数据方法。

1、利用聚集索引查找数据
还是这张 B+ 树索引图，现在我们应该知道这就是聚集索引，表中的数据存储在其中。
现在假设我们要查找 id>=18 并且 id<40 的用户数据。对应的 sql 语句为：
MySQL
1	select * from user where id>=18 and id <40
其中 id 为主键，具体的查找过程如下：
①一般根节点都是常驻内存的，也就是说页 1 已经在内存中了，此时不需要到磁盘中读取数据，直接从内存中读取即可。
从内存中读取到页 1，要查找这个 id>=18 and id <40 或者范围值，我们首先需要找到 id=18 的键值。
从页 1 中我们可以找到键值 18，此时我们需要根据指针 p2，定位到页 3。
②要从页 3 中查找数据，我们就需要拿着 p2 指针去磁盘中进行读取页 3。
从磁盘中读取页 3 后将页 3 放入内存中，然后进行查找，我们可以找到键值 18，然后再拿到页 3 中的指针 p1，定位到页 8。
③同样的页 8 页不在内存中，我们需要再去磁盘中将页 8 读取到内存中。
将页 8 读取到内存中后。因为页中的数据是链表进行连接的，而且键值是按照顺序存放的，此时可以根据二分查找法定位到键值 18。
此时因为已经到数据页了，此时我们已经找到一条满足条件的数据了，就是键值 18 对应的数据。
因为是范围查找，而且此时所有的数据又都存在叶子节点，并且是有序排列的，那么我们就可以对页 8 中的键值依次进行遍历查找并匹配满足条件的数据。
我们可以一直找到键值为 22 的数据，然后页 8 中就没有数据了，此时我们需要拿着页 8 中的 p 指针去读取页 9 中的数据。
④因为页 9 不在内存中，就又会加载页 9 到内存中，并通过和页 8 中一样的方式进行数据的查找，直到将页 12 加载到内存中，发现 41 大于 40，此时不满足条件。那么查找到此终止。
最终我们找到满足条件的所有数据，总共 12 条记录：
(18,kl), (19,kl), (22,hj), (24,io), (25,vg) , (29,jk), (31,jk) , (33,rt) , (34,ty) , (35,yu) , (37,rt) , (39,rt) 。

2、利用非聚集索引查找数据
读者看到这张图的时候可能会蒙，这是啥东西啊？怎么都是数字。如果有这种感觉，请仔细看下图中红字的解释。
什么？还看不懂？那我再来解释下吧。首先，这个非聚集索引表示的是用户幸运数字的索引（为什么是幸运数字？一时兴起想起来的:-)），此时表结构是这样的。
在叶子节点中，不再存储所有的数据了，存储的是键值和主键。对于叶子节点中的 x-y，比如 1-1。左边的 1 表示的是索引的键值，右边的 1 表示的是主键值。
如果我们要找到幸运数字为 33 的用户信息，对应的 sql 语句为：
MySQL
1	select * from user where luckNum=33
查找的流程跟聚集索引一样，这里就不详细介绍了。我们最终会找到主键值 47，找到主键后我们需要再到聚集索引中查找具体对应的数据信息，此时又回到了聚集索引的查找流程。
在 MyISAM 中，聚集索引和非聚集索引的叶子节点都会存储数据的文件地址。

3、总结
本篇文章从二叉查找树，详细说明了为什么 MySQL 用 B+ 树作为数据的索引，以及在 InnoDB 中数据库如何通过 B+ 树索引来存储数据以及查找数据。
我们一定要记住这句话：数据即索引，索引即数据。
