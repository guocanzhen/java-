循环依赖：

什么是循环依赖？
从字面上来理解就是A依赖B的同时B也依赖了A。
当然，这是最常见的一种循环依赖，比较特殊的还有：自己依赖自己

Spring处理循环依赖的基本思路是这样的：
虽说要初始化一个Bean，必须要注入Bean里的依赖，才算初始化成功，但并不要求此时依赖的依赖也都注入成功，只要依赖对象的构造方法执行完了，这个依赖对象就算存在了，注入就算成功了，至于依赖的依赖，以后再初始化也来得及（参考Java的内存模型）。
因此，我们初始化一个Bean时，先调用Bean的构造方法，这个对象就在内存中存在了（对象里面的依赖还没有被注入），然后把这个对象保存下来，当循环依赖产生时，直接拿到之前保存的对象，于是循环依赖就被终止了，依赖注入也就顺利完成了。

举个例子：
假设对象A中有属性是对象B，对象B中也有属性是对象A，即A和B循环依赖。
创建对象A，调用A的构造，并把A保存下来。
然后准备注入对象A中的依赖，发现对象A依赖对象B，那么开始创建对象B。
调用B的构造，并把B保存下来。
然后准备注入B的构造，发现B依赖对象A，对象A之前已经创建了，直接获取A并把A注入B（注意此时的对象A还没有完全注入成功，对象A中的对象B还没有注入），于是B创建成功。
把创建成功的B注入A，于是A也创建成功了。
于是循环依赖就被解决了。





