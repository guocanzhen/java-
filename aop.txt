aop：

aop实现原理分析：
Spring 中的 AOP，有接口就用 JDK 动态代理，没有接口就用 Cglib 动态代理。
Spring Boot 中的 AOP，2.0 之前和 Spring 一样；2.0 之后首选 Cglib 动态代理，如果用户想要使用 JDK 动态代理，需要自己手动配置。
spring.aop.proxy-target-class：false为jdk动态代理，true为cglib动态代理，默认true


1、jdkaop实现原理简介

1）AOP的advisor和advice配置：
@Component
@Aspect
public class AopConfig {

    @Pointcut("execution(* com.garine.debug.testcase.model.AopObject..*(..))")
    public void mypoint(){
        //切面定义
    }

    @Before("mypoint()")
    public void doAround() throws Throwable {
        System.out.println("before logic");
    }
}

2）AopObject，被代理拦截对象：
@Component
public class AopObject {

    public void aoped(){
        System.out.println("logic");
    }
}

2、代理实现的处理器(BeanPostProcessor)
首先是第一步内容，对我们在AopConfig中的AOP配置内容进行解析并且保存到BeanFactory中，这个过程就是解析保存切面信息。
1）代理实现的源头–AnnotationAwareAspectJAutoProxyCreator







